// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int  @id @default(autoincrement())
  name        String
  username    String  @unique
  email       String  @unique
  registration String @unique @db.VarChar(6)
  password    String  @default("")
  profile_id   Int 
  profile     Profile @relation(fields: [profile_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  @@map("users")
}

model Profile {
  id          Int  @id @default(autoincrement())
  name        String  @unique
  description String?
  is_admin     Boolean @default(false)
  users       Users[]
  profile_modules profile_module[]
  profile_transaction profile_transaction[]
  profile_function profile_function[]
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
   @@map("profile")
}

model Module {
  id              Int  @id @default(autoincrement())
  name            String
  description     String? @default("Sem descrição")
  text_color       String  @default("#000000")
  background_color String  @default("#ffffff")
  transactions    Transaction[]
  functions       Function[]
  profile_modules  profile_module[]
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  @@map("module")
}

model Transaction {
  id          Int  @id @default(autoincrement())
  name        String  @unique
  description String? @default("Sem descrição")
  module      Module  @relation(fields: [module_id], references: [id])
  module_id    Int
  profile_transactions profile_transaction[]
  profile_function profile_function[]
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  @@map("transaction")
}

model Function {
  id          Int  @id @default(autoincrement())
  name        String
  description String? @default("Sem descrição")
  module      Module  @relation(fields: [module_id], references: [id])
  module_id   Int
  profile_functions profile_function[]
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  @@map("function")
}

model profile_module {
  id        Int   @id @default(autoincrement())
  profile   Profile  @relation(fields: [profile_id], references: [id])
  profile_id Int
  module    Module   @relation(fields: [module_id], references: [id])
  module_id  Int
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  @@map("profile_module")

  @@unique([profile_id, module_id])
}

model profile_transaction {
  id               Int                   @id @default(autoincrement())
  profile          Profile               @relation(fields: [profile_id], references: [id])
  profile_id        Int
  transaction      Transaction           @relation(fields: [transaction_id], references: [id])
  transaction_id   Int
  created_at       DateTime              @default(now())
  updated_at       DateTime              @default(now())
  @@map("profile_transaction")

  @@unique([profile_id, transaction_id])
}

model profile_function {
  id               Int                   @id @default(autoincrement())
  profile          Profile               @relation(fields: [profile_id], references: [id])
  profile_id        Int
  function         Function              @relation(fields: [function_id], references: [id])
  function_id      Int
  transaction      Transaction           @relation(fields: [transaction_id], references: [id])
  transaction_id   Int
  created_at       DateTime              @default(now())
  updated_at       DateTime              @default(now())
  @@map("profile_function")

   @@unique([profile_id, transaction_id, function_id])
}